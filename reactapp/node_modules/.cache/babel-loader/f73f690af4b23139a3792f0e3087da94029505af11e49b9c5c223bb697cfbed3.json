{"ast":null,"code":"// Email Service for QuizMaster\n// Uses EmailJS for client-side email sending\nimport emailjs from 'emailjs-com';\nclass EmailService {\n  constructor() {\n    this.serviceId = process.env.REACT_APP_EMAILJS_SERVICE_ID;\n    this.templateIds = {\n      quizReminder: process.env.REACT_APP_EMAILJS_TEMPLATE_REMINDER,\n      quizResults: process.env.REACT_APP_EMAILJS_TEMPLATE_RESULTS,\n      newQuizNotification: process.env.REACT_APP_EMAILJS_TEMPLATE_NEW_QUIZ\n    };\n    this.publicKey = process.env.REACT_APP_EMAILJS_PUBLIC_KEY;\n    this.initialized = false;\n  }\n\n  // Initialize EmailJS (call this in your main app)\n  async initialize() {\n    try {\n      if (!this.serviceId || !this.publicKey) {\n        console.warn('EmailJS not configured - using demo mode');\n        return false;\n      }\n      emailjs.init(this.publicKey);\n      this.initialized = true;\n      console.log('EmailJS initialized successfully');\n      return true;\n    } catch (error) {\n      console.error('Failed to initialize EmailJS:', error);\n      return false;\n    }\n  }\n\n  // Send quiz reminder email\n  async sendQuizReminder(studentEmail, quizData) {\n    const templateParams = {\n      to_email: studentEmail,\n      student_name: this.getStudentName(studentEmail),\n      quiz_title: quizData.title,\n      quiz_description: quizData.description,\n      time_limit: quizData.timeLimit,\n      reminder_message: `Don't forget to take the \"${quizData.title}\" quiz!`,\n      quiz_url: window.location.origin\n    };\n    return this.sendEmail(this.templateIds.quizReminder, templateParams);\n  }\n\n  // Send quiz results email\n  async sendQuizResults(studentEmail, quizData, results) {\n    const percentage = Math.round(results.score / results.totalQuestions * 100);\n    const grade = this.calculateGrade(percentage);\n    const templateParams = {\n      to_email: studentEmail,\n      student_name: this.getStudentName(studentEmail),\n      quiz_title: quizData.title,\n      score: results.score,\n      total_questions: results.totalQuestions,\n      percentage: percentage,\n      grade: grade,\n      time_taken: results.timeTaken || 'N/A',\n      completion_date: new Date().toLocaleDateString()\n    };\n    return this.sendEmail(this.templateIds.quizResults, templateParams);\n  }\n\n  // Send new quiz notification to all students\n  async sendNewQuizNotification(quizData) {\n    const students = JSON.parse(localStorage.getItem('students') || '[]');\n    const studentsWithEmail = students.filter(student => student.email);\n    if (studentsWithEmail.length === 0) {\n      console.log('No students with email addresses found');\n      return [];\n    }\n    const emailPromises = studentsWithEmail.map(student => {\n      const templateParams = {\n        to_email: student.email,\n        student_name: student.username,\n        quiz_title: quizData.title,\n        quiz_description: quizData.description,\n        time_limit: quizData.timeLimit,\n        quiz_url: window.location.origin\n      };\n      return this.sendEmail(this.templateIds.quizReminder, templateParams);\n    });\n    return Promise.allSettled(emailPromises);\n  }\n\n  // Generic email sending method\n  async sendEmail(templateId, templateParams) {\n    try {\n      if (!this.initialized) {\n        // Fallback to demo mode\n        console.log('Demo mode - Email would be sent:', {\n          templateId,\n          templateParams\n        });\n        this.logEmailSent(templateParams.to_email, templateId);\n        return {\n          success: true,\n          message: 'Email sent (demo mode)'\n        };\n      }\n\n      // Real EmailJS sending\n      const result = await emailjs.send(this.serviceId, templateId, templateParams, this.publicKey);\n      console.log('Email sent successfully:', result);\n      this.logEmailSent(templateParams.to_email, templateId);\n      return {\n        success: true,\n        message: 'Email sent successfully',\n        result\n      };\n    } catch (error) {\n      console.error('Email sending failed:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n\n  // Helper methods\n  getStudentName(email) {\n    const students = JSON.parse(localStorage.getItem('students') || '[]');\n    const student = students.find(s => s.email === email || `${s.username}@example.com` === email);\n    return student ? student.username : email.split('@')[0];\n  }\n  calculateGrade(percentage) {\n    if (percentage >= 90) return 'A';\n    if (percentage >= 80) return 'B';\n    if (percentage >= 70) return 'C';\n    if (percentage >= 60) return 'D';\n    return 'F';\n  }\n  logEmailSent(email, type) {\n    const emailLogs = JSON.parse(localStorage.getItem('emailLogs') || '[]');\n    emailLogs.push({\n      email,\n      type,\n      timestamp: new Date().toISOString(),\n      status: 'sent'\n    });\n    localStorage.setItem('emailLogs', JSON.stringify(emailLogs));\n  }\n\n  // Get email sending history\n  getEmailHistory() {\n    return JSON.parse(localStorage.getItem('emailLogs') || '[]');\n  }\n}\nexport default new EmailService();","map":{"version":3,"names":["emailjs","EmailService","constructor","serviceId","process","env","REACT_APP_EMAILJS_SERVICE_ID","templateIds","quizReminder","REACT_APP_EMAILJS_TEMPLATE_REMINDER","quizResults","REACT_APP_EMAILJS_TEMPLATE_RESULTS","newQuizNotification","REACT_APP_EMAILJS_TEMPLATE_NEW_QUIZ","publicKey","REACT_APP_EMAILJS_PUBLIC_KEY","initialized","initialize","console","warn","init","log","error","sendQuizReminder","studentEmail","quizData","templateParams","to_email","student_name","getStudentName","quiz_title","title","quiz_description","description","time_limit","timeLimit","reminder_message","quiz_url","window","location","origin","sendEmail","sendQuizResults","results","percentage","Math","round","score","totalQuestions","grade","calculateGrade","total_questions","time_taken","timeTaken","completion_date","Date","toLocaleDateString","sendNewQuizNotification","students","JSON","parse","localStorage","getItem","studentsWithEmail","filter","student","email","length","emailPromises","map","username","Promise","allSettled","templateId","logEmailSent","success","message","result","send","find","s","split","type","emailLogs","push","timestamp","toISOString","status","setItem","stringify","getEmailHistory"],"sources":["C:/Users/sanje/Downloads/PROJECTS/QuizSystem/reactapp/src/components/EmailService.js"],"sourcesContent":["// Email Service for QuizMaster\n// Uses EmailJS for client-side email sending\nimport emailjs from 'emailjs-com';\n\nclass EmailService {\n  constructor() {\n    this.serviceId = process.env.REACT_APP_EMAILJS_SERVICE_ID;\n    this.templateIds = {\n      quizReminder: process.env.REACT_APP_EMAILJS_TEMPLATE_REMINDER,\n      quizResults: process.env.REACT_APP_EMAILJS_TEMPLATE_RESULTS,\n      newQuizNotification: process.env.REACT_APP_EMAILJS_TEMPLATE_NEW_QUIZ\n    };\n    this.publicKey = process.env.REACT_APP_EMAILJS_PUBLIC_KEY;\n    this.initialized = false;\n  }\n\n  // Initialize EmailJS (call this in your main app)\n  async initialize() {\n    try {\n      if (!this.serviceId || !this.publicKey) {\n        console.warn('EmailJS not configured - using demo mode');\n        return false;\n      }\n      emailjs.init(this.publicKey);\n      this.initialized = true;\n      console.log('EmailJS initialized successfully');\n      return true;\n    } catch (error) {\n      console.error('Failed to initialize EmailJS:', error);\n      return false;\n    }\n  }\n\n  // Send quiz reminder email\n  async sendQuizReminder(studentEmail, quizData) {\n    const templateParams = {\n      to_email: studentEmail,\n      student_name: this.getStudentName(studentEmail),\n      quiz_title: quizData.title,\n      quiz_description: quizData.description,\n      time_limit: quizData.timeLimit,\n      reminder_message: `Don't forget to take the \"${quizData.title}\" quiz!`,\n      quiz_url: window.location.origin\n    };\n\n    return this.sendEmail(this.templateIds.quizReminder, templateParams);\n  }\n\n  // Send quiz results email\n  async sendQuizResults(studentEmail, quizData, results) {\n    const percentage = Math.round((results.score / results.totalQuestions) * 100);\n    const grade = this.calculateGrade(percentage);\n\n    const templateParams = {\n      to_email: studentEmail,\n      student_name: this.getStudentName(studentEmail),\n      quiz_title: quizData.title,\n      score: results.score,\n      total_questions: results.totalQuestions,\n      percentage: percentage,\n      grade: grade,\n      time_taken: results.timeTaken || 'N/A',\n      completion_date: new Date().toLocaleDateString()\n    };\n\n    return this.sendEmail(this.templateIds.quizResults, templateParams);\n  }\n\n  // Send new quiz notification to all students\n  async sendNewQuizNotification(quizData) {\n    const students = JSON.parse(localStorage.getItem('students') || '[]');\n    const studentsWithEmail = students.filter(student => student.email);\n    \n    if (studentsWithEmail.length === 0) {\n      console.log('No students with email addresses found');\n      return [];\n    }\n    \n    const emailPromises = studentsWithEmail.map(student => {\n      const templateParams = {\n        to_email: student.email,\n        student_name: student.username,\n        quiz_title: quizData.title,\n        quiz_description: quizData.description,\n        time_limit: quizData.timeLimit,\n        quiz_url: window.location.origin\n      };\n      \n      return this.sendEmail(this.templateIds.quizReminder, templateParams);\n    });\n\n    return Promise.allSettled(emailPromises);\n  }\n\n  // Generic email sending method\n  async sendEmail(templateId, templateParams) {\n    try {\n      if (!this.initialized) {\n        // Fallback to demo mode\n        console.log('Demo mode - Email would be sent:', { templateId, templateParams });\n        this.logEmailSent(templateParams.to_email, templateId);\n        return { success: true, message: 'Email sent (demo mode)' };\n      }\n\n      // Real EmailJS sending\n      const result = await emailjs.send(\n        this.serviceId,\n        templateId,\n        templateParams,\n        this.publicKey\n      );\n      \n      console.log('Email sent successfully:', result);\n      this.logEmailSent(templateParams.to_email, templateId);\n      return { success: true, message: 'Email sent successfully', result };\n      \n    } catch (error) {\n      console.error('Email sending failed:', error);\n      return { success: false, error: error.message };\n    }\n  }\n\n  // Helper methods\n  getStudentName(email) {\n    const students = JSON.parse(localStorage.getItem('students') || '[]');\n    const student = students.find(s => s.email === email || `${s.username}@example.com` === email);\n    return student ? student.username : email.split('@')[0];\n  }\n\n  calculateGrade(percentage) {\n    if (percentage >= 90) return 'A';\n    if (percentage >= 80) return 'B';\n    if (percentage >= 70) return 'C';\n    if (percentage >= 60) return 'D';\n    return 'F';\n  }\n\n  logEmailSent(email, type) {\n    const emailLogs = JSON.parse(localStorage.getItem('emailLogs') || '[]');\n    emailLogs.push({\n      email,\n      type,\n      timestamp: new Date().toISOString(),\n      status: 'sent'\n    });\n    localStorage.setItem('emailLogs', JSON.stringify(emailLogs));\n  }\n\n  // Get email sending history\n  getEmailHistory() {\n    return JSON.parse(localStorage.getItem('emailLogs') || '[]');\n  }\n}\n\nexport default new EmailService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}