{"ast":null,"code":"// Email Service for QuizMaster\n// Uses EmailJS for client-side email sending\n\nclass EmailService {\n  constructor() {\n    this.serviceId = 'service_quizmaster';\n    this.templateIds = {\n      quizReminder: 'template_quiz_reminder',\n      quizResults: 'template_quiz_results',\n      newQuizNotification: 'template_new_quiz'\n    };\n    this.publicKey = 'YOUR_EMAILJS_PUBLIC_KEY'; // Replace with actual key\n  }\n\n  // Initialize EmailJS (call this in your main app)\n  async initialize() {\n    try {\n      // In a real implementation, you'd load EmailJS library\n      console.log('Email service initialized');\n      return true;\n    } catch (error) {\n      console.error('Failed to initialize email service:', error);\n      return false;\n    }\n  }\n\n  // Send quiz reminder email\n  async sendQuizReminder(studentEmail, quizData) {\n    const templateParams = {\n      to_email: studentEmail,\n      student_name: this.getStudentName(studentEmail),\n      quiz_title: quizData.title,\n      quiz_description: quizData.description,\n      time_limit: quizData.timeLimit,\n      reminder_message: `Don't forget to take the \"${quizData.title}\" quiz!`,\n      quiz_url: window.location.origin\n    };\n    return this.sendEmail(this.templateIds.quizReminder, templateParams);\n  }\n\n  // Send quiz results email\n  async sendQuizResults(studentEmail, quizData, results) {\n    const percentage = Math.round(results.score / results.totalQuestions * 100);\n    const grade = this.calculateGrade(percentage);\n    const templateParams = {\n      to_email: studentEmail,\n      student_name: this.getStudentName(studentEmail),\n      quiz_title: quizData.title,\n      score: results.score,\n      total_questions: results.totalQuestions,\n      percentage: percentage,\n      grade: grade,\n      time_taken: results.timeTaken || 'N/A',\n      completion_date: new Date().toLocaleDateString()\n    };\n    return this.sendEmail(this.templateIds.quizResults, templateParams);\n  }\n\n  // Send new quiz notification to all students\n  async sendNewQuizNotification(quizData) {\n    const students = JSON.parse(localStorage.getItem('students') || '[]');\n    const emailPromises = students.map(student => {\n      const templateParams = {\n        to_email: student.email || `${student.username}@example.com`,\n        student_name: student.username,\n        quiz_title: quizData.title,\n        quiz_description: quizData.description,\n        time_limit: quizData.timeLimit,\n        quiz_url: window.location.origin\n      };\n      return this.sendEmail(this.templateIds.newQuizNotification, templateParams);\n    });\n    return Promise.allSettled(emailPromises);\n  }\n\n  // Generic email sending method\n  async sendEmail(templateId, templateParams) {\n    try {\n      // Simulate email sending for demo purposes\n      console.log('Sending email:', {\n        templateId,\n        templateParams\n      });\n\n      // In production, this would use EmailJS:\n      // const result = await emailjs.send(this.serviceId, templateId, templateParams, this.publicKey);\n\n      // Simulate success/failure\n      const success = Math.random() > 0.1; // 90% success rate\n\n      if (success) {\n        this.logEmailSent(templateParams.to_email, templateId);\n        return {\n          success: true,\n          message: 'Email sent successfully'\n        };\n      } else {\n        throw new Error('Email delivery failed');\n      }\n    } catch (error) {\n      console.error('Email sending failed:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n\n  // Helper methods\n  getStudentName(email) {\n    const students = JSON.parse(localStorage.getItem('students') || '[]');\n    const student = students.find(s => s.email === email || `${s.username}@example.com` === email);\n    return student ? student.username : email.split('@')[0];\n  }\n  calculateGrade(percentage) {\n    if (percentage >= 90) return 'A';\n    if (percentage >= 80) return 'B';\n    if (percentage >= 70) return 'C';\n    if (percentage >= 60) return 'D';\n    return 'F';\n  }\n  logEmailSent(email, type) {\n    const emailLogs = JSON.parse(localStorage.getItem('emailLogs') || '[]');\n    emailLogs.push({\n      email,\n      type,\n      timestamp: new Date().toISOString(),\n      status: 'sent'\n    });\n    localStorage.setItem('emailLogs', JSON.stringify(emailLogs));\n  }\n\n  // Get email sending history\n  getEmailHistory() {\n    return JSON.parse(localStorage.getItem('emailLogs') || '[]');\n  }\n}\nexport default new EmailService();","map":{"version":3,"names":["EmailService","constructor","serviceId","templateIds","quizReminder","quizResults","newQuizNotification","publicKey","initialize","console","log","error","sendQuizReminder","studentEmail","quizData","templateParams","to_email","student_name","getStudentName","quiz_title","title","quiz_description","description","time_limit","timeLimit","reminder_message","quiz_url","window","location","origin","sendEmail","sendQuizResults","results","percentage","Math","round","score","totalQuestions","grade","calculateGrade","total_questions","time_taken","timeTaken","completion_date","Date","toLocaleDateString","sendNewQuizNotification","students","JSON","parse","localStorage","getItem","emailPromises","map","student","email","username","Promise","allSettled","templateId","success","random","logEmailSent","message","Error","find","s","split","type","emailLogs","push","timestamp","toISOString","status","setItem","stringify","getEmailHistory"],"sources":["C:/Users/sanje/Downloads/PROJECTS/QuizSystem/reactapp/src/components/EmailService.js"],"sourcesContent":["// Email Service for QuizMaster\n// Uses EmailJS for client-side email sending\n\nclass EmailService {\n  constructor() {\n    this.serviceId = 'service_quizmaster';\n    this.templateIds = {\n      quizReminder: 'template_quiz_reminder',\n      quizResults: 'template_quiz_results',\n      newQuizNotification: 'template_new_quiz'\n    };\n    this.publicKey = 'YOUR_EMAILJS_PUBLIC_KEY'; // Replace with actual key\n  }\n\n  // Initialize EmailJS (call this in your main app)\n  async initialize() {\n    try {\n      // In a real implementation, you'd load EmailJS library\n      console.log('Email service initialized');\n      return true;\n    } catch (error) {\n      console.error('Failed to initialize email service:', error);\n      return false;\n    }\n  }\n\n  // Send quiz reminder email\n  async sendQuizReminder(studentEmail, quizData) {\n    const templateParams = {\n      to_email: studentEmail,\n      student_name: this.getStudentName(studentEmail),\n      quiz_title: quizData.title,\n      quiz_description: quizData.description,\n      time_limit: quizData.timeLimit,\n      reminder_message: `Don't forget to take the \"${quizData.title}\" quiz!`,\n      quiz_url: window.location.origin\n    };\n\n    return this.sendEmail(this.templateIds.quizReminder, templateParams);\n  }\n\n  // Send quiz results email\n  async sendQuizResults(studentEmail, quizData, results) {\n    const percentage = Math.round((results.score / results.totalQuestions) * 100);\n    const grade = this.calculateGrade(percentage);\n\n    const templateParams = {\n      to_email: studentEmail,\n      student_name: this.getStudentName(studentEmail),\n      quiz_title: quizData.title,\n      score: results.score,\n      total_questions: results.totalQuestions,\n      percentage: percentage,\n      grade: grade,\n      time_taken: results.timeTaken || 'N/A',\n      completion_date: new Date().toLocaleDateString()\n    };\n\n    return this.sendEmail(this.templateIds.quizResults, templateParams);\n  }\n\n  // Send new quiz notification to all students\n  async sendNewQuizNotification(quizData) {\n    const students = JSON.parse(localStorage.getItem('students') || '[]');\n    const emailPromises = students.map(student => {\n      const templateParams = {\n        to_email: student.email || `${student.username}@example.com`,\n        student_name: student.username,\n        quiz_title: quizData.title,\n        quiz_description: quizData.description,\n        time_limit: quizData.timeLimit,\n        quiz_url: window.location.origin\n      };\n      \n      return this.sendEmail(this.templateIds.newQuizNotification, templateParams);\n    });\n\n    return Promise.allSettled(emailPromises);\n  }\n\n  // Generic email sending method\n  async sendEmail(templateId, templateParams) {\n    try {\n      // Simulate email sending for demo purposes\n      console.log('Sending email:', { templateId, templateParams });\n      \n      // In production, this would use EmailJS:\n      // const result = await emailjs.send(this.serviceId, templateId, templateParams, this.publicKey);\n      \n      // Simulate success/failure\n      const success = Math.random() > 0.1; // 90% success rate\n      \n      if (success) {\n        this.logEmailSent(templateParams.to_email, templateId);\n        return { success: true, message: 'Email sent successfully' };\n      } else {\n        throw new Error('Email delivery failed');\n      }\n    } catch (error) {\n      console.error('Email sending failed:', error);\n      return { success: false, error: error.message };\n    }\n  }\n\n  // Helper methods\n  getStudentName(email) {\n    const students = JSON.parse(localStorage.getItem('students') || '[]');\n    const student = students.find(s => s.email === email || `${s.username}@example.com` === email);\n    return student ? student.username : email.split('@')[0];\n  }\n\n  calculateGrade(percentage) {\n    if (percentage >= 90) return 'A';\n    if (percentage >= 80) return 'B';\n    if (percentage >= 70) return 'C';\n    if (percentage >= 60) return 'D';\n    return 'F';\n  }\n\n  logEmailSent(email, type) {\n    const emailLogs = JSON.parse(localStorage.getItem('emailLogs') || '[]');\n    emailLogs.push({\n      email,\n      type,\n      timestamp: new Date().toISOString(),\n      status: 'sent'\n    });\n    localStorage.setItem('emailLogs', JSON.stringify(emailLogs));\n  }\n\n  // Get email sending history\n  getEmailHistory() {\n    return JSON.parse(localStorage.getItem('emailLogs') || '[]');\n  }\n}\n\nexport default new EmailService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}